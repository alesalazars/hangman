{"version":3,"sources":["components/button.js","components/input.js","pages/index/functions.js","pages/index/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","onClick","disabled","text","Input","type","id","value","onChange","onKeyPress","sort","setRandomWord","setCopyOfRandomWord","a","fetch","response","json","data","englishWord","console","log","randomWordArray","split","takeALife","lives","setLives","setResponse","reduceLife","zeroLives","setButtonAvailability","setInputAvailability","randomWord","putWrongInBox","copyOfWrongLetters","valueOfInput","setCopyOfWrongLetters","setWrongLettersInBox","auxArr","push","Set","join","checkLetter","copyOfRandomWord","setRightLetters","rightLetters","wrongLetters","setWrongLetters","setTried","setWinningMessage","setValueOfInput","wrongLettersInBox","i","length","arrRights","splice","arrWrongs","j","Index","useState","buttonAvailability","inputAvailability","youWon","tried","liList","setLiList","useEffect","undefined","wordDrawn","key","drawWord","event","document","getElementById","maxLength","target","toLowerCase","wroteInsideInput","which","handleKeyPress","playAgain","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19c63648.chunk.js","sourcesContent":["import React from 'react';\nimport '../pages/index/index.css';\n\nconst Button = (props) => {\n  return(\n    <button className={`btn ${ props.className }`} onClick={props.onClick} disabled={props.disabled}>{props.text}</button>\n  )\n}\n\nexport default Button;","import React from 'react';\nimport '../pages/index/index.css';\n\nconst Input = (props) => {\n    return(\n        <input \n            disabled={props.disabled} \n            type={props.type}\n            id={props.id}\n            value={props.value} \n            onChange={props.onChange}\n            onKeyPress={props.onKeyPress}\n        />\n    )\n}\n\nexport default Input;","import React from 'react';\nimport './index.css';\n\n\n// Throws a random word.\nconst sort = async(setRandomWord, setCopyOfRandomWord) => {\n\n  const response = await fetch('https://random-word-api.herokuapp.com/word?number=1')\n  const data = await response.json()\n  const englishWord = data[0]\n  console.log('englishWord:', englishWord)\n\n  setRandomWord(englishWord)\n\n  let randomWordArray = englishWord.split('')\n  setCopyOfRandomWord(randomWordArray)\n}\n\n// Draw word in the DOM\nconst drawWord = (randomWord, setLiList, liList, rightLetters, copyOfRandomWord) => {\n  let wordDrawn = []\n\n  if( rightLetters !== undefined ){\n\n    for(let i = 0 ; i < copyOfRandomWord.length ; i++){\n      if(randomWord[i] !== copyOfRandomWord[i]){\n        wordDrawn.push(<li key={i} id={i} className={'isGuessed'}>{randomWord[i]}</li>)\n      }else{\n        wordDrawn.push(<li key={i} id={i} className={'notGuessed'}>{randomWord[i]}</li>)\n      }\n    }\n\n  }else{\n    for(let i = 0 ; i < copyOfRandomWord.length ; i++){\n      wordDrawn.push(<li key={i} id={i} className={'notGuessed'}>{randomWord[i]}</li>)\n    }\n  }\n\n  console.log('randomWord: ', randomWord)\n  console.log('wordDrawn: ', wordDrawn)\n\n  if(liList === undefined){\n    let helper = wordDrawn\n    setLiList(helper)\n  }\n\n  return(\n    wordDrawn\n  )\n}\n\n\n// Gets the value of the input when onChange is triggered.\nconst wroteInsideInput = (event, inputAvailability, setButtonAvailability, setValueOfInput) => {\n  document.getElementById(\"letter\").maxLength = \"1\";\n  if(inputAvailability === false){\n    setButtonAvailability(false)\n    let tryLetter = event.target.value.toLowerCase()\n    setValueOfInput(tryLetter)\n  }\n}\n\n\n// Remove a life\nconst takeALife = (lives, setLives, setResponse) => {\n  let reduceLife = lives - 1\n  setLives(reduceLife)\n  let livesLeft = 'Lives: ' + (reduceLife)\n  setResponse(livesLeft)\n}\n\n// No lives left\nconst zeroLives = (setResponse, setButtonAvailability, setInputAvailability, randomWord) => {\n  let noClicksLeft = 'No lives left :( the word was: ' + randomWord \n  setResponse(noClicksLeft)\n  setButtonAvailability(true)\n  setInputAvailability(true)\n}\n\n// Put wrong letter inside box at the bottom\nconst putWrongInBox = (copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox) => {\n  let auxArr = copyOfWrongLetters\n  auxArr.push(valueOfInput)\n  setCopyOfWrongLetters(auxArr)\n\n  let wrongLettersWithoutDuplicates = [...new Set(copyOfWrongLetters)]\n  let wrongLettersIntoString = wrongLettersWithoutDuplicates.join(', ')\n  setWrongLettersInBox(wrongLettersIntoString)\n}\n\n// Make enter key equivalent to clicking the button with the cursor\nconst handleKeyPress = (event, checkLetter, setResponse, randomWord, copyOfRandomWord, valueOfInput, setRightLetters, rightLetters, setCopyOfRandomWord, wrongLetters, setWrongLetters, setCopyOfWrongLetters, setTried, lives, setWinningMessage, setButtonAvailability, setValueOfInput, setInputAvailability, setLives, setWrongLettersInBox, copyOfWrongLetters, wrongLettersInBox) => {\n  if(event.which === 13){\n    checkLetter(setResponse, randomWord, copyOfRandomWord, valueOfInput, setRightLetters, rightLetters, setCopyOfRandomWord, wrongLetters, setWrongLetters, setCopyOfWrongLetters, setTried, lives, setWinningMessage, setButtonAvailability, setValueOfInput, setInputAvailability, setLives, setWrongLettersInBox, copyOfWrongLetters, wrongLettersInBox)\n  }\n}\n\n\n// Main interactions, check if the letter is in the word and show it\nconst checkLetter = (setResponse, randomWord, copyOfRandomWord, valueOfInput, setRightLetters, rightLetters, setCopyOfRandomWord, wrongLetters, setWrongLetters, setCopyOfWrongLetters, setTried, lives, setWinningMessage, setButtonAvailability, setValueOfInput, setInputAvailability, setLives, setWrongLettersInBox, copyOfWrongLetters, wrongLettersInBox) => {\n\n    if(valueOfInput !== ''){\n\n      for(let i = 0 ; i < copyOfRandomWord.length ; i++){\n        console.log('recorriendo string de palabra random como array')\n  \n        if(valueOfInput === copyOfRandomWord[i]){\n\n          console.log('la letra SI coincide con un elemento de la lista')\n            \n          let arrRights = rightLetters\n          arrRights.push(valueOfInput)\n          setRightLetters(arrRights)\n          console.log('rightLetters', rightLetters)\n  \n          copyOfRandomWord.splice(i,1,0)\n          setCopyOfRandomWord(copyOfRandomWord)\n          console.log('copyOfRandomWord menos la letra adivinada --> ', copyOfRandomWord)\n  \n        }else{\n          console.log('la letra NO coincide, copyOfRandomWord --> ', copyOfRandomWord)\n  \n          let arrWrongs = wrongLetters\n          arrWrongs.push(valueOfInput)\n          setWrongLetters(arrWrongs)\n          console.log('wrongLetters', wrongLetters)\n        }\n  \n        setWrongLetters([])\n  \n      }\n  \n      if(wrongLetters.length === copyOfRandomWord.length){\n  \n        if(rightLetters.length > 0){\n          setTried('')\n          for(let j = 0 ; j < rightLetters.length ; j++){\n            console.log('recorriendo lista de letras correctas:', rightLetters)\n            if(valueOfInput === rightLetters[j]){\n              console.log('LA LETRA YA LA PROBÉ ANTES!!!!')\n              let alreadyGuessed = 'You already tried this one, silly! Try again!'\n              setTried(alreadyGuessed)\n            }else if(valueOfInput !== rightLetters[j] && lives >= 2){\n              takeALife(lives, setLives, setResponse, copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n              putWrongInBox(copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n            }else if(valueOfInput !== rightLetters[j] && lives === 1){\n              zeroLives(setResponse, setButtonAvailability, setInputAvailability, randomWord)\n              putWrongInBox(copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n            }\n          }\n        }else{\n          if(lives >= 2){\n            takeALife(lives, setLives, setResponse, copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n            putWrongInBox(copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n          }else if(lives === 1){\n            zeroLives(setResponse, setButtonAvailability, setInputAvailability, randomWord)\n            putWrongInBox(copyOfWrongLetters, valueOfInput, setCopyOfWrongLetters, setWrongLettersInBox, wrongLettersInBox)\n          }\n        }\n        \n      }\n  \n      if(rightLetters.length === copyOfRandomWord.length){\n        let youWon = 'You won! The word is: ' + randomWord\n        setWinningMessage(youWon)\n        setButtonAvailability(true)\n        setInputAvailability(true)\n      }\n  \n      setValueOfInput('')\n\n    }\n\n}\n\n// Restart the game\nconst playAgain = (setRandomWord, setCopyOfRandomWord, setValueOfInput, setButtonAvailability, setInputAvailability, setResponse, setWinningMessage, setTried, setLives, setRightLetters, setWrongLetters, setCopyOfWrongLetters, setWrongLettersInBox, setLiList) => {\n  setRandomWord()\n  setCopyOfRandomWord([])\n  setValueOfInput('')\n  setButtonAvailability(true)\n  setInputAvailability(false)\n  setResponse('You have 5 lives to guess.')\n  setWinningMessage('')\n  setTried('')\n  setLives(5)\n  setRightLetters([])\n  setWrongLetters([])\n  setCopyOfWrongLetters([])\n  setWrongLettersInBox()\n  setLiList()\n}\n\n\nexport { sort, wroteInsideInput, checkLetter, playAgain, drawWord, handleKeyPress };","import React, { useState, useEffect } from 'react';\n\nimport Button from '../../components/button';\nimport Input from '../../components/input';\n\nimport { sort, wroteInsideInput, checkLetter, playAgain, drawWord, handleKeyPress } from './functions'\n\nimport './index.css';\n\nconst Index = () => {\n\n  // Saves the random word chosen.\n  const [randomWord, setRandomWord] = useState()\n\n  // Saves a copy of the random word chosen, and updates removing the letters that are already correct to avoid unnecesarry iterations.\n  const [copyOfRandomWord, setCopyOfRandomWord] = useState([])\n\n  // Saves the value of the input when onChange is triggered.\n  const [valueOfInput, setValueOfInput] = useState('')\n\n  // Sets the \"try word\" button on disable, and updates to able when a letter is entered into the input above.\n  const [buttonAvailability, setButtonAvailability] = useState(true)\n\n  // If true it means the game is over and the input is disabled\n  const [inputAvailability, setInputAvailability] = useState(false)\n\n  // Updates with messages for the user as they interact with the app.\n  const [response, setResponse] = useState('You have 5 lives to guess.')\n\n  // Give winning message\n  const [youWon, setWinningMessage] = useState('')\n\n  // Give message when the letter was already tried\n  const [tried, setTried] = useState('')\n\n  // Keeps count of number of lives to guess\n  const [lives, setLives] = useState(5)\n\n  // Saves the letters that are right\n  const [rightLetters, setRightLetters] = useState([])\n\n  // Saves the wrong letter attempts\n  const [wrongLetters, setWrongLetters] = useState([])\n\n  // Saves a copy of the wrongLetters array to be processed into the box that shows mistaken letters\n  const [copyOfWrongLetters, setCopyOfWrongLetters] = useState([])\n\n  // Puts the wrong letters in a box for the player to see\n  const [wrongLettersInBox, setWrongLettersInBox] = useState()\n\n  // Variable that has the li with the letters of the random word\n  const [liList, setLiList] = useState()\n\n  \n  useEffect(() => {\n \n    sort(setRandomWord, setCopyOfRandomWord)\n\n  }, [])\n\n\n  return(\n    <div className=\"index\">\n      {console.log('rendering')}\n\n      <div className=\"container\">\n        <div className=\"row\">\n\n          <ul id=\"letters\">\n            {randomWord !== undefined ? drawWord(randomWord, setLiList, liList, rightLetters, copyOfRandomWord) : ''}\n          </ul>\n\n        </div>\n\n        <div className=\"row\">\n          <p className=\"mb-0\">Enter a letter:</p>\n\n          <Input \n            disabled={inputAvailability} \n            type=\"text\" \n            id=\"letter\" \n            value={valueOfInput} \n            onChange={(event) => { wroteInsideInput(event, inputAvailability, setButtonAvailability, setValueOfInput) }}\n            onKeyPress={(event) => { handleKeyPress(event, checkLetter, setResponse, randomWord, copyOfRandomWord, valueOfInput, setRightLetters, rightLetters, setCopyOfRandomWord, wrongLetters, setWrongLetters, setCopyOfWrongLetters, setTried, lives, setWinningMessage, setButtonAvailability, setValueOfInput, setInputAvailability, setLives, setWrongLettersInBox, copyOfWrongLetters, wrongLettersInBox) }}\n          />\n\n          <Button \n            disabled={buttonAvailability} \n            onClick={ () => {\n              checkLetter(setResponse, randomWord, copyOfRandomWord, valueOfInput, setRightLetters, rightLetters, setCopyOfRandomWord, wrongLetters, setWrongLetters, setCopyOfWrongLetters, setTried, lives, setWinningMessage, setButtonAvailability, setValueOfInput, setInputAvailability, setLives, setWrongLettersInBox, copyOfWrongLetters, wrongLettersInBox)\n            }}\n            text={'Check the letter'}\n            className={'check-btn'}\n          />\n        </div>\n\n        <div className=\"row\">\n\n          <p className=\"f-bold\">{youWon}</p>\n          <p>{tried}</p>\n          <p>{response}</p>\n          \n          <div id=\"wrongLettersBox\">\n            <h6>Wrong letters:</h6>\n            <p>{wrongLettersInBox}</p>\n          </div>\n\n          <Button \n            onClick={() => {\n              playAgain(setRandomWord, setCopyOfRandomWord, setValueOfInput, setButtonAvailability, setInputAvailability, setResponse, setWinningMessage, setTried, setLives, setRightLetters, setWrongLetters, setCopyOfWrongLetters, setWrongLettersInBox, setLiList)\n              sort(setRandomWord, setCopyOfRandomWord)\n              console.log(randomWord)\n            }} \n            text={'Play again'}/>\n\n        </div>\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default Index;","import React from 'react';\nimport Index from './pages/index/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}